{"version":3,"sources":["conext/SocketContext.js","hooks/useSocket.js","components/BandAdd.js","components/BandChart.js","components/BandList.js","pages/HomePage.js","BandNamesApp.js","index.js"],"names":["SocketContext","createContext","SocketProvider","children","serverPath","socket","useMemo","io","connect","transports","useState","online","setOnline","useEffect","on","useSocket","Provider","value","BandAdd","valor","setValor","useContext","onSubmit","e","preventDefault","trim","length","emit","nombre","className","placeholder","onChange","target","BandChart","chart","console","log","bands","Chart","destroy","crearGrafica","off","register","registerables","ctx","document","getElementById","type","data","labels","map","band","name","datasets","label","votes","backgroundColor","borderColor","borderWidth","options","animation","indexAxis","scales","x","stacked","id","BandList","setBands","onClick","event","nuevoNombre","cambioNombre","onBlur","HomePage","BandNamesApp","ReactDOM","render"],"mappings":"uMAIaA,EAAgBC,0BAGhBC,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAE7B,ECNqB,SAACC,GAEtB,IAAMC,EAASC,mBAAQ,kBAAMC,IAAGC,QAAQJ,EAAY,CAChDK,WAAY,CAAC,iBACb,CAACL,IACL,EAA8BM,oBAAS,GAAvC,mBAAQC,EAAR,KAAgBC,EAAhB,KAcA,OAZAC,qBAAU,WACNR,EAAOS,GAAG,WAAW,WACnBF,GAAU,QAEX,CAACP,IAEJQ,qBAAU,WACRR,EAAOS,GAAG,cAAc,WACtBF,GAAU,QAEX,CAACP,IAEC,CACHA,SACAM,UDfuBI,CAAU,yBAA7BV,EAAR,EAAQA,OAAQM,EAAhB,EAAgBA,OAEhB,OACI,cAACX,EAAcgB,SAAf,CAAwBC,MAAO,CAAEZ,SAAQM,UAAzC,SACMR,KEVDe,EAAU,WAEnB,MAA0BR,mBAAS,IAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACQf,EAAWgB,qBAAYrB,GAAvBK,OAWR,OACI,qCACI,+CAEA,sBAAMiB,SAbG,SAACC,GACdA,EAAEC,iBAECL,EAAMM,OAAOC,OAAS,IACrBrB,EAAOsB,KAAK,cAAe,CAACC,OAAQT,IACpCC,EAAS,MAQT,SACI,uBACIS,UAAU,eACVC,YAAY,wBACZb,MAAQE,EACRY,SAAW,SAACR,GAAD,OAAOH,EAAUG,EAAES,OAAOf,gB,eCrB5CgB,EAAY,WAErB,IAAQ5B,EAAWgB,qBAAYrB,GAAvBK,OAERQ,qBAAU,WACN,IAAIqB,EAAQ,GAQZ,OAPAC,QAAQC,IAAIF,GACZ7B,EAAOS,GAAG,iBAAiB,SAACuB,GACrBH,aAAiBI,KAChBJ,EAAMK,UAEVL,EAAQM,EAAcH,MAEnB,kBAAMhC,EAAOoC,IAAI,oBACzB,CAACpC,IAEJ,IAAMmC,EAAe,WAAkB,IAAhBH,EAAe,uDAAP,GAC3BC,IAAMI,SAAN,MAAAJ,IAAK,YAAaK,MAClB,IAAMC,EAAMC,SAASC,eAAe,WAEpC,OAAO,IAAIR,IAAMM,EAAK,CAClBG,KAAM,MACNC,KAAM,CACFC,OAAQZ,EAAMa,KAAK,SAAAC,GAAI,OAAIA,EAAKC,QAChCC,SAAU,CAAC,CACPC,MAAO,aACPN,KAAMX,EAAMa,KAAK,SAAAC,GAAI,OAAIA,EAAKI,SAC9BC,gBAAiB,CACb,0BACA,0BACA,0BACA,0BACA,2BACA,2BAEJC,YAAa,CACT,wBACA,wBACA,wBACA,wBACA,yBACA,yBAEJC,YAAa,KAGrBC,QAAS,CACLC,WAAW,EACXC,UAAW,IACXC,OAAQ,CACJC,EAAG,CAAC,CACAC,SAAS,SAO7B,OACI,wBAAQC,GAAG,aC7DNC,EAAW,WAEpB,MAA0BxD,mBAAS,IAAnC,mBAAO2B,EAAP,KAAc8B,EAAd,KACQ9D,EAAWgB,qBAAYrB,GAAvBK,OAERQ,qBAAU,WAMN,OAJAR,EAAOS,GAAG,iBAAiB,SAACuB,GACxB8B,EAAS9B,MAGN,kBAAMhC,EAAOoC,IAAI,oBACzB,CAACpC,IA0DJ,OACI,mCACI,wBAAOwB,UAAU,uBAAjB,UACI,gCACI,+BACI,uBACA,wCACA,uCACA,6CAGR,gCA3CJQ,EAAMa,KAAK,SAAAC,GAAI,OACX,+BACI,6BACI,wBACItB,UAAU,kBACVuC,QAAU,kBAfnBH,EAegCd,EAAKc,QAdhD5D,EAAOsB,KAAK,cAAesC,GADjB,IAACA,GAaK,kBAOJ,6BACI,uBACIpC,UAAU,eACVZ,MAAQkC,EAAKC,KACbrB,SAAW,SAACsC,GAAD,OAtCd,SAACA,EAAOJ,GACzB,IAAMK,EAAcD,EAAMrC,OAAOf,MACjCkD,GAAU,SAAA9B,GAAK,OAAIA,EAAMa,KAAK,SAAAC,GAI1B,OAHIA,EAAKc,KAAOA,IACZd,EAAKC,KAAOkB,GAETnB,QAgC+BoB,CAAaF,EAAOlB,EAAKc,KAC/CO,OAAS,kBA7BXP,EA6B+Bd,EAAKc,GA7BhCrC,EA6BoCuB,EAAKC,UA5B/D/C,EAAOsB,KAAK,uBAAwB,CAAEsC,KAAIrC,WADzB,IAACqC,EAAIrC,OAgCV,6BAAI,mCAAOuB,EAAKI,MAAZ,SACJ,6BACI,wBACI1B,UAAU,iBACVuC,QAAU,kBA5BlBH,EA4BgCd,EAAKc,QA3BjD5D,EAAOsB,KAAK,eAAgBsC,GADjB,IAACA,GA0BI,wBAnBEd,EAAKc,eCKhBQ,MAvCf,WAEE,IAAQ9D,EAAWU,qBAAYrB,GAAvBW,OAER,OACE,sBAAKkB,UAAU,YAAf,UACE,qBAAKA,UAAU,QAAf,SACE,gDAGIlB,EACE,sBAAMkB,UAAU,eAAhB,oBACA,sBAAMA,UAAU,cAAhB,0BAKR,2CACA,uBAEA,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAAC,EAAD,QAIJ,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,aCnCG6C,EAAe,WACxB,OACI,cAAC,EAAD,UACI,cAAC,EAAD,OCHZC,IAASC,OACL,cAAC,EAAD,IACF/B,SAASC,eAAe,W","file":"static/js/main.3981d873.chunk.js","sourcesContent":["import React, { createContext } from \"react\";\r\nimport { useSocket } from \"../hooks/useSocket\";\r\n\r\n\r\nexport const SocketContext = createContext()\r\n\r\n\r\nexport const SocketProvider = ({ children }) => {\r\n\r\n    const { socket, online } = useSocket('http://localhost:8080')\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ socket, online }}>\r\n            { children }\r\n        </SocketContext.Provider>\r\n    )\r\n}","import { useEffect, useMemo, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nexport const useSocket = (serverPath) => {\r\n\r\n    const socket = useMemo(() => io.connect(serverPath, {\r\n        transports: ['websocket']\r\n    }), [serverPath])\r\n    const [ online, setOnline ] = useState(false)\r\n\r\n    useEffect(() => {\r\n        socket.on('connect', () => {\r\n          setOnline(true);\r\n        });\r\n      }, [socket])\r\n    \r\n      useEffect(() => {\r\n        socket.on('disconnect', () => {\r\n          setOnline(false);\r\n        });\r\n      }, [socket])\r\n\r\n    return {\r\n        socket,\r\n        online\r\n    }\r\n}","import React, { useContext, useState } from 'react'\r\nimport { SocketContext } from '../conext/SocketContext'\r\n\r\nexport const BandAdd = () => {\r\n\r\n    const [valor, setValor] = useState('')\r\n    const { socket } = useContext( SocketContext )\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(valor.trim().length > 0){\r\n            socket.emit('nueva-banda', {nombre: valor })\r\n            setValor('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Agregar Banda</h3>            \r\n\r\n            <form onSubmit={ onSubmit }>\r\n                <input\r\n                    className=\"form-control\"\r\n                    placeholder=\"Nuevo nombre de banda\"\r\n                    value={ valor }\r\n                    onChange={ (e) => setValor( e.target.value ) }\r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import { Chart, registerables } from 'chart.js';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { SocketContext } from '../conext/SocketContext';\r\n\r\n\r\nexport const BandChart = () => {\r\n\r\n    const { socket } = useContext( SocketContext )\r\n\r\n    useEffect(() => {\r\n        let chart = ''\r\n        console.log(chart)\r\n        socket.on('current-bands', (bands) => {\r\n            if(chart instanceof Chart){\r\n                chart.destroy()\r\n            }\r\n            chart = crearGrafica( bands )\r\n        })\r\n        return () => socket.off('current-bands')\r\n    }, [socket])\r\n    \r\n    const crearGrafica = ( bands = []) => {\r\n        Chart.register(...registerables)\r\n        const ctx = document.getElementById('myChart')\r\n        \r\n        return new Chart(ctx, {\r\n            type: 'bar',\r\n            data: {\r\n                labels: bands.map( band => band.name ),\r\n                datasets: [{\r\n                    label: '# of Votes',\r\n                    data: bands.map( band => band.votes ),\r\n                    backgroundColor: [\r\n                        'rgba(255, 99, 132, 0.2)',\r\n                        'rgba(54, 162, 235, 0.2)',\r\n                        'rgba(255, 206, 86, 0.2)',\r\n                        'rgba(75, 192, 192, 0.2)',\r\n                        'rgba(153, 102, 255, 0.2)',\r\n                        'rgba(255, 159, 64, 0.2)'\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(255, 99, 132, 1)',\r\n                        'rgba(54, 162, 235, 1)',\r\n                        'rgba(255, 206, 86, 1)',\r\n                        'rgba(75, 192, 192, 1)',\r\n                        'rgba(153, 102, 255, 1)',\r\n                        'rgba(255, 159, 64, 1)'\r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                animation: false,\r\n                indexAxis: 'y',\r\n                scales: {\r\n                    x: [{\r\n                        stacked: true\r\n                    }]\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <canvas id=\"myChart\"></canvas>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { SocketContext } from '../conext/SocketContext'\r\n\r\nexport const BandList = () => {\r\n\r\n    const [bands, setBands] = useState([])\r\n    const { socket } = useContext( SocketContext )\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('current-bands', (bands) => {\r\n            setBands(bands)\r\n        })\r\n\r\n        return () => socket.off('current-bands')\r\n    }, [socket])\r\n\r\n    const cambioNombre = (event, id) => {\r\n        const nuevoNombre = event.target.value\r\n        setBands( bands => bands.map( band => {\r\n            if( band.id === id ){\r\n                band.name = nuevoNombre\r\n            }\r\n            return band\r\n        }))\r\n    }\r\n\r\n    const onPerdioFoco = (id, nombre) => {\r\n        socket.emit('cambiar-nombre-banda', { id, nombre })\r\n    }\r\n\r\n    const votar = (id) => {\r\n        socket.emit('votar-banda', id)\r\n    }\r\n    \r\n    const borrar = (id) => {\r\n        socket.emit('borrar-banda', id)\r\n    }\r\n\r\n    const crearRows = () => {\r\n        return (\r\n            bands.map( band => (                \r\n                <tr key={ band.id }>\r\n                    <td>\r\n                        <button \r\n                            className=\"btn btn-primary\"\r\n                            onClick={ () => votar( band.id ) }\r\n                        >\r\n                            +1\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            value={ band.name }\r\n                            onChange={ (event) => cambioNombre(event, band.id) }\r\n                            onBlur={ () => onPerdioFoco( band.id, band.name ) }\r\n                        />\r\n                    </td>\r\n                    <td><h3> { band.votes } </h3></td>\r\n                    <td>\r\n                        <button \r\n                            className=\"btn btn-danger\"\r\n                            onClick={ () => borrar( band.id ) }\r\n                        >\r\n                            Borrar\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            ))\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <table className=\"table table-stripped\">\r\n                <thead>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Nombre</th>\r\n                        <th>Votos</th>\r\n                        <th>Borrar</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { crearRows() }\r\n                </tbody>\r\n            </table>            \r\n        </>\r\n    )\r\n}\r\n","import React, { useContext } from 'react';\n\nimport { BandAdd } from '../components/BandAdd';\nimport { BandChart } from '../components/BandChart';\nimport { BandList } from '../components/BandList';\nimport { SocketContext } from '../conext/SocketContext';\n\n\nfunction HomePage() {\n\n  const { online } = useContext( SocketContext )\n\n  return (\n    <div className=\"container\">\n      <div className=\"alert\">\n        <p>\n          Service status:\n          {\n            online\n            ? <span className=\"text-success\">Online</span>\n            : <span className=\"text-danger\">Offline</span>\n          }\n        </p>\n      </div>\n\n      <h1>BandNames</h1>\n      <hr/>\n\n      <div className=\"row\">\n        <div className=\"col\">\n          <BandChart/>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-8\">\n          <BandList/>\n        </div>\n\n        <div className=\"col-4\">\n          <BandAdd/>\n        </div>        \n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react'\r\nimport { SocketProvider } from './conext/SocketContext'\r\n\r\nimport HomePage from './pages/HomePage'\r\n\r\nexport const BandNamesApp = () => {\r\n    return (\r\n        <SocketProvider>\r\n            <HomePage/>\r\n        </SocketProvider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BandNamesApp } from './BandNamesApp';\n\nReactDOM.render(\n    <BandNamesApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}